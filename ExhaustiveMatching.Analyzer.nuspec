<?xml version="1.0"?>
<package>
  <metadata>
    <id>DaiPlusPlus.ExhaustiveMatching.Analyzer</id>
    <version>0.7.0</version>
    <authors>Jeff Walker + Contributors</authors>
    <owners>Jeff Walker</owners>
    <license type="expression">BSD-3-Clause</license>
    <projectUrl>https://github.com/WalkerCodeRanger/ExhaustiveMatching</projectUrl>
    <repository type="git" url="https://github.com/WalkerCodeRanger/ExhaustiveMatching.git" />
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>
ExhaustiveMatching.Analyzer adds exhaustive matching to C# switch statements and expressions.

Get compiler errors for missing cases in a switch statement or expression. Mark which switches
should have exhaustiveness checking by throwing an exception in the default case. Exhaustiveness
checking works not just for enums, but for classes and interfaces. Turn them into discriminated
unions (aka sum types) by marking them with the 'Closed' attribute and listing the cases.
ExhaustiveMatching.Analyzer goes beyond what other languages support by handling full inheritance
hierarchies.
    </description>
    <releaseNotes></releaseNotes>
    <copyright>Copyright 2019-2023 Jeff Walker, Contributors</copyright>
    <tags>analyzers, switch, exhaustive, match, discriminated, union, sum-type</tags>

    <dependencies>
      <group targetFramework="netstandard2.0" />
    </dependencies>
  </metadata>
  <files>
    <file src="ExhaustiveMatching.Analyzer/bin/Release/netstandard2.0/ExhaustiveMatching.Analyzer.dll" target="analyzers/netstandard2.0/cs" />
  </files>
</package>
